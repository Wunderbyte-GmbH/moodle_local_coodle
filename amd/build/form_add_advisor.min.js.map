{"version":3,"file":"form_add_advisor.min.js","sources":["../src/form_add_advisor.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Modal Form user create\n * @package    local_coodle\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    ADD_ADVISOR: '[data-action=\"local-coodle-set-advisor\"]',\n};\n\n/**\n * Gets called from mustache template.\n *\n */\nexport const init = () => {\n\n    // Find all container.\n    const containers = document.querySelectorAll(SELECTORS.ADD_ADVISOR);\n            // eslint-disable-next-line no-console\n            console.log('init button');\n    containers.forEach(element => {\n        if (!element.dataset.initialized) {\n            element.addEventListener('click', openForm);\n            element.dataset.initialized = true;\n            // eslint-disable-next-line no-console\n            console.log('init button');\n        } else {\n            // Just to make sure during development that this is not called to often.\n            // eslint-disable-next-line no-console\n            console.log('unnecessary call of init');\n        }\n    });\n};\n\n/**\n * Opens the Modal to edit questions.\n * @param {*} event the click event\n */\n const openForm = event => {\n\n    let button = event.target;\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"local_coodle\\\\form\\\\add_advisor\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            'clientid': button.dataset.clientid\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('setadvisor', 'local_coodle')},\n\n        saveButtonText: getString('setadvisor', 'local_coodle'),\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        const response = e.detail;\n        // eslint-disable-next-line no-console\n        console.log('Response of the modal: ', response);\n        window.location.reload();\n    });\n\n    // Show the form.\n    modalForm.show().then(() => {\n\n        return;\n    }).catch(e => {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    });\n};\n\n"],"names":["SELECTORS","containers","document","querySelectorAll","console","log","forEach","element","dataset","initialized","addEventListener","openForm","event","button","target","modalForm","ModalForm","formClass","args","clientid","modalConfig","title","saveButtonText","returnFocus","events","FORM_SUBMITTED","e","response","detail","window","location","reload","show","then","catch"],"mappings":";;;;;;sJA0BMA,sBACW,yDAOG,WAGVC,WAAaC,SAASC,iBAAiBH,uBAErCI,QAAQC,IAAI,eACpBJ,WAAWK,SAAQC,UACVA,QAAQC,QAAQC,YAQjBL,QAAQC,IAAI,6BAPZE,QAAQG,iBAAiB,QAASC,UAClCJ,QAAQC,QAAQC,aAAc,EAE9BL,QAAQC,IAAI,0BAajBM,SAAWC,YAEVC,OAASD,MAAME,aAEbC,UAAY,IAAIC,mBAAU,CAG5BC,UAAW,kCAEXC,KAAM,UACUL,OAAOL,QAAQW,UAG/BC,YAAa,CAACC,OAAO,mBAAU,aAAc,iBAE7CC,gBAAgB,mBAAU,aAAc,gBAExCC,YAAaV,SAMjBE,UAAUL,iBAAiBK,UAAUS,OAAOC,gBAAiBC,UACnDC,SAAWD,EAAEE,OAEnBxB,QAAQC,IAAI,0BAA2BsB,UACvCE,OAAOC,SAASC,YAIpBhB,UAAUiB,OAAOC,MAAK,SAGnBC,OAAMR,IAELtB,QAAQC,IAAIqB"}