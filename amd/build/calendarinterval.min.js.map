{"version":3,"file":"calendarinterval.min.js","sources":["../src/calendarinterval.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * Modal Form user create\n * @package    local_coodle\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport const init = () => {\n    // Get the select element\n    // Get the button that opens the modal\n    // var btn = document.querySelector('[data-action=\"new-event-button\"]');\n\n    // // When the user clicks on the button, open the modal\n    // btn.onclick = function() {\n\n    // // Create a new MutationObserver instance to observe changes to the DOM\n    // var observer = new MutationObserver(function(mutations) {\n    //     // Loop through the mutations and check if the modal element has been added\n    //     mutations.forEach(function(mutation) {\n\n    //     var modal = mutation.target.querySelector(\".modal\");\n    //     if (modal) {\n    //         // If the modal element has been added, disconnect the observer and call the myFunction() function\n    //         observer.disconnect();\n    //         changeminuteinterval();\n    //     }\n    //     });\n    // });\n    //  // Set the observer to watch for changes to the body element\n    //  observer.observe(document.body, { childList: true, subtree: true });\n    // };\n\n    var buttons = Array.from(document.querySelectorAll('.maincalendar .clickable'));\n    buttons.push(document.querySelector('[data-action=\"new-event-button\"]'));\n    // Loop through each button and attach a click event listener\n    buttons.forEach(function(btn) {\n        btn.onclick = function() {\n\n            // Create a new MutationObserver instance to observe changes to the DOM\n            var observer = new MutationObserver(function(mutations) {\n                // Loop through the mutations and check if the modal element has been added\n                mutations.forEach(function(mutation) {\n                    var modal = mutation.target.querySelector(\".modal\");\n                    if (modal) {\n                        // If the modal element has been added, disconnect the observer and call the changeminuteinterval() function\n                        observer.disconnect();\n                        changeminuteinterval();\n                    }\n                });\n            });\n\n            // Start observing the DOM changes\n            observer.observe(document.body, { childList: true, subtree: true });\n        };\n    });\n};\n\n// Function that should be triggered after the modal content is loaded\nconst changeminuteinterval = () => {\n  // Add your code here\n\n  // Wait until the select element is visible\n  var intervalId = setInterval(function() {\n    var select = document.getElementById('id_timestart_minute');\n    if (select && select.offsetParent !== null) {\n      clearInterval(intervalId);\n\n      // Loop through the options and remove the ones that are not 15, 30, or 45\n      for (let i = select.options.length - 1; i >= 0; i--) {\n        const value = parseInt(select.options[i].value);\n        if (![0, 15, 30, 45].includes(value)) {\n          select.remove(i);\n        }\n      }\n    }\n  }, 100);\n};\n"],"names":["buttons","Array","from","document","querySelectorAll","push","querySelector","forEach","btn","onclick","observer","MutationObserver","mutations","mutation","target","disconnect","changeminuteinterval","observe","body","childList","subtree","intervalId","setInterval","select","getElementById","offsetParent","clearInterval","i","options","length","value","parseInt","includes","remove"],"mappings":"kKAuBoB,SAyBZA,QAAUC,MAAMC,KAAKC,SAASC,iBAAiB,6BACnDJ,QAAQK,KAAKF,SAASG,cAAc,qCAEpCN,QAAQO,SAAQ,SAASC,KACrBA,IAAIC,QAAU,eAGNC,SAAW,IAAIC,kBAAiB,SAASC,WAEzCA,UAAUL,SAAQ,SAASM,UACXA,SAASC,OAAOR,cAAc,YAGtCI,SAASK,aACTC,8BAMZN,SAASO,QAAQd,SAASe,KAAM,CAAEC,WAAW,EAAMC,SAAS,eAMlEJ,qBAAuB,SAIvBK,WAAaC,aAAY,eACvBC,OAASpB,SAASqB,eAAe,0BACjCD,QAAkC,OAAxBA,OAAOE,aAAuB,CAC1CC,cAAcL,gBAGT,IAAIM,EAAIJ,OAAOK,QAAQC,OAAS,EAAGF,GAAK,EAAGA,IAAK,OAC7CG,MAAQC,SAASR,OAAOK,QAAQD,GAAGG,OACpC,CAAC,EAAG,GAAI,GAAI,IAAIE,SAASF,QAC5BP,OAAOU,OAAON,OAInB"}